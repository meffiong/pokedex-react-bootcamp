{"version":3,"sources":["Pokecard.js","Pokedex.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","react_default","a","createElement","className","this","props","name","type","exp","Component","Pokedex","pokemon","map","p","src_Pokecard_0","id","base_experience","defaultProps","App","src_Pokedex","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAeeA,0LAVP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQC,KAAKC,MAAMC,MAAYN,EAAAC,EAAAC,cAAA,WAC9CE,KAAKC,MAAME,KAAKP,EAAAC,EAAAC,cAAA,WACjBF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,OAAb,QAAyBC,KAAKC,MAAMG,aAN7BC,cCAjBC,mLAeF,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVC,KAAKC,MAAMM,QAAQC,IAAI,SAACC,GAAD,OACtBb,EAAAC,EAAAC,cAACY,EAAD,CAAUC,GAAIF,EAAEE,GAAIT,KAAMO,EAAEP,KAAME,IAAKK,EAAEG,4BAlB/BP,aAAhBC,EACGO,aAAe,CACpBN,QAAS,CACP,CAACI,GAAI,EAAGT,KAAM,aAAcC,KAAM,OAAQS,gBAAiB,IAC3D,CAACD,GAAI,EAAGT,KAAM,WAAYC,KAAM,QAASS,gBAAiB,IAC1D,CAACD,GAAI,GAAIT,KAAM,UAAWC,KAAM,MAAOS,gBAAiB,IACxD,CAACD,GAAI,GAAIT,KAAM,aAAcC,KAAM,SAAUS,gBAAiB,KAC9D,CAACD,GAAI,GAAIT,KAAM,UAAWC,KAAM,WAAYS,gBAAiB,KAC7D,CAACD,GAAI,GAAIT,KAAM,aAAcC,KAAM,SAAUS,gBAAiB,IAC9D,CAACD,GAAI,GAAIT,KAAM,SAAUC,KAAM,SAAUS,gBAAiB,KAC1D,CAACD,GAAI,IAAKT,KAAM,QAASC,KAAM,SAAUS,gBAAiB,MAkB/CN,cCnBFQ,MARf,WACE,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACiB,EAAD,QCKYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.18d48682.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Pokecard.css'\n\nclass Pokecard extends Component{\n    render(){\n        return(\n            <div className=\"pokecard\">\n                <span className=\"name\">{this.props.name}</span><br />\n                {this.props.type}<br />\n                <p className=\"exp\">Exp: {this.props.exp}</p>\n            </div>\n        )\n    }\n}\n\nexport default Pokecard;","import React, {Component} from 'react';\nimport Pokecard from './Pokecard';\n\nclass Pokedex extends Component{\n  static defaultProps = {\n    pokemon: [\n      {id: 4, name: 'Charmander', type: 'fire', base_experience: 62},\n      {id: 7, name: 'Squirtle', type: 'water', base_experience: 63},\n      {id: 11, name: 'Metapod', type: 'bug', base_experience: 72},\n      {id: 12, name: 'Butterfree', type: 'flying', base_experience: 178},\n      {id: 25, name: 'Pikachu', type: 'electric', base_experience: 112},\n      {id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95},\n      {id: 94, name: 'Gengar', type: 'poison', base_experience: 225},\n      {id: 133, name: 'Eevee', type: 'normal', base_experience: 65}\n    ]\n  };\n\n  render(){\n    return(\n      <div className=\"pokedex\">\n          {this.props.pokemon.map((p) => (\n            <Pokecard id={p.id} name={p.name} exp={p.base_experience} />\n          ))}\n      </div>\n    )\n  }\n}\n\n\n\n  // https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png.\n  export default Pokedex;","import React from 'react';\nimport Pokedex from './Pokedex';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Pokedex />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}